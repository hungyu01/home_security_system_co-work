#!/usr/bin/env node

import { isMaster, fork, on } from 'cluster';
import { cpus } from 'os';
import { app, server } from '../app';
const debug = require('debug')('accounts:server');

// 導入 Mongoose configuration and handle the connection
import connectDB from '../db/db';

const numCPUs = cpus().length;

if (isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    fork();
  }

  on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
    fork(); // Restart the worker
  });

} else {
  /**
   * Get port from environment and store in Express.
   */
  const port = normalizePort(process.env.PORT || '4000');
  app.set('port', port);

  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }
  
  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('MongoDB connection successful');
  }


  // 導入 DB 函數
  function onDBSuccess() {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }

  // 回调函數 DB connection 出錯時
  function onDBError(err) {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  }

  // 連線到 DB
  connectDB(onDBSuccess, onDBError);

  console.log(`Worker ${process.pid} started`);
}
